//This bnf has been derived from https://graphviz.gitlab.io/_pages/doc/info/lang.html

// ### [ Tokens ] ##############################################################

_unicode_byte
	: '\u0080' - '\uFFFC'
	// skip invalid code point (\uFFFD)
	| '\uFFFE' - '\U0010FFFF'
;

_letter        : 'a' - 'z' | 'A' - 'Z' | _unicode_byte | '_' ;
_decimal_digit : '0' - '9' ;
_decimals      : _decimal_digit { _decimal_digit } ;

// An ID is one of the following:
//
//    1) Any string of alphabetic ([a-zA-Z\200-\377]) characters, underscores
//       ('_') or digits ([0-9]), not beginning with a digit;
//
//    2) a numeral [-]?(.[0-9]+ | [0-9]+(.[0-9]*)? );
//
//    3) any double-quoted string ("...") possibly containing escaped quotes
//       (\");
//
//    4) an HTML string (<...>).

id
	: _letter { _letter | _decimal_digit }
	| _int_lit
	| _string_lit
;

_int_lit
	: [ '-' ] '.' _decimals
	| [ '-' ] _decimals [ '.' { _decimal_digit } ]
;

// An arbitrary ASCII character except null (0x00), double quote (0x22) and
// backslash (0x5C).
_ascii_char
	// skip null (0x00)
	: '\x01' - '\x21'
	// skip double quote (0x22)
	| '\x23' - '\x5B'
	// skip backslash (0x5C)
	| '\x5D' - '\x7F'
;

_unicode_char
	: _ascii_char
	| _unicode_byte
;

// In quoted strings in DOT, the only escaped character is double-quote (").
// That is, in quoted strings, the dyad \" is converted to "; all other
// characters are left unchanged. In particular, \\ remains \\.

_escaped_char : '\\' ( _unicode_char | '"' | '\\' ) ;
_char         : _unicode_char | _escaped_char ;
_string_lit   : '"' { _char } '"' ;

// The language supports C++-style comments: /* */ and //. In addition, a line
// beginning with a '#' character is considered a line output from a C
// preprocessor (e.g., # 34 to indicate line 34 ) and discarded.

_line_comment
	: '/' '/' { . } '\n'
	| '#' { . } '\n'
;

_block_comment : '/' '*' { . | '*' } '*' '/' ;
!comment       : _line_comment | _block_comment ;

!whitespace : ' ' | '\t' | '\r' | '\n' ;

// ### [ Syntax ] ##############################################################

<< import "github.com/awalterschulze/gographviz/ast" >>

//graph	:	[ strict ] (graph | digraph) [ ID ] '{' stmt_list '}'
//simplified graph	:	digraph ID '{' stmt_list '}'
DotGraph
	: "digraph" Id "{" "}"                        << ast.NewGraph(ast.DIGRAPH, ast.FALSE, $1, nil) >>
	| "digraph" Id "{" StmtList "}"               << ast.NewGraph(ast.DIGRAPH, ast.FALSE, $1, $3) >>
	;

//stmt_list	:	[ stmt [ ';' ] [ stmt_list ] ]
StmtList
	:  StmtWithSemi                               << ast.NewStmtList($0) >>
	|  StmtList StmtWithSemi                      << ast.AppendStmtList($0, $1) >>
	;

StmtWithSemi
	:  Stmt                                       << $0, nil >>
	|  Stmt ";"                                   << $0, nil >>
	;

//stmt	:	node_stmt | edge_stmt | attr_stmt | (ID '=' ID) | subgraph
Stmt
	: Id "=" Id                                   << ast.NewAttr($0, $2) >>
	| NodeStmt                                    << $0, nil >>
	| EdgeStmt                                    << $0, nil >>
	| AttrStmt                                    << $0, nil >>
	;

//attr_stmt	:	(graph | node | edge) attr_list
AttrStmt
	: "graph" AttrList                            << ast.NewGraphAttrs($1) >>
	| "node" AttrList                             << ast.NewNodeAttrs($1) >>
	| "edge" AttrList                             << ast.NewEdgeAttrs($1) >>
	;

//attr_list	:	'[' [ a_list ] ']' [ attr_list ]
AttrList
	: "[" "]"                                     << ast.NewAttrList(nil) >>
	| "[" AList "]"                               << ast.NewAttrList($1) >>
	| AttrList "[" "]"                            << ast.AppendAttrList($0, nil) >>
	| AttrList "[" AList "]"                      << ast.AppendAttrList($0, $2) >>
	;

//a_list	:	ID [ '=' ID ] [ ',' ] [ a_list ]
AList
	: Attr                                        << ast.NewAList($0) >>
	| AList Attr                                  << ast.AppendAList($0, $1) >>
	| AList "," Attr                              << ast.AppendAList($0, $2) >>
	;

//An a_list clause of the form ID is equivalent to ID=true.
Attr
	: Id                                          << ast.NewAttr($0, nil) >>
	| Id "=" Id                                   << ast.NewAttr($0, $2) >>
	;

//edge_stmt	:	(node_id | subgraph) edgeRHS [ attr_list ]
EdgeStmt
	: NodeId EdgeRHS                              << ast.NewEdgeStmt($0, $1, nil) >>
	| NodeId EdgeRHS AttrList                     << ast.NewEdgeStmt($0, $1, $2) >>
	;

//edgeRHS	:	edgeop (node_id | subgraph) [ edgeRHS ]
EdgeRHS
	: EdgeOp NodeId                               << ast.NewEdgeRHS($0, $1) >>
	| EdgeRHS EdgeOp NodeId                       << ast.AppendEdgeRHS($0, $1, $2) >>
	;

//node_stmt	:	node_id [ attr_list ]
NodeStmt
	: NodeId                                      << ast.NewNodeStmt($0, nil) >>
	| NodeId AttrList                             << ast.NewNodeStmt($0, $1) >>
	;

//node_id	:	ID [ port ]
NodeId
	: Id                                          << ast.NewNodeID($0, nil) >>
	| Id Port                                     << ast.NewNodeID($0, $1) >>
	;

//compass_pt	:	(n | ne | e | se | s | sw | w | nw | c | _)
//Note also that the allowed compass point values are not keywords,
//so these strings can be used elsewhere as ordinary identifiers and,
//conversely, the parser will actually accept any identifier.
//port	:	':' ID [ ':' compass_pt ]
//		|	':' compass_pt
Port
	: ":" Id                                      << ast.NewPort($1, nil), nil >>
	| ":" Id ":" Id                               << ast.NewPort($1, $3), nil >>
	;

//An edgeop is -> in directed graphs and -- in undirected graphs.
EdgeOp
	: "->"                                        << ast.DIRECTED, nil >>
	| "--"                                        << ast.UNDIRECTED, nil >>
	;

Id
	: id                                          << ast.NewID($0) >>
	;